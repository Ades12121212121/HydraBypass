const { BrowserWindow, ipcMain } = require("electron");
const path = require("path");
const axios = require("axios");
const Store = require("electron-store");
const si = require("systeminformation");
const { v4: uuidv4 } = require("uuid");
const crypto = require("crypto");

class LicenseManager {
  constructor(options = {}) {
    this.mainWindow = null;
    this.options = {
      licenseServerUrl: "XXXXXXXX",
      activationServerUrl: "XXXXXXXX",
      encryptionKey: "XXXXXXXXXX",
      ...options,
    };

    // Configuration pour stockage persistant
    this.store = new Store({
      encryptionKey: this.options.encryptionKey,
      schema: {
        licenseKey: {
          type: "string",
        },
        hardwareId: {
          type: "string",
        },
        licenseStatus: {
          type: "object",
        },
      },
    });

    // Initialiser les √©couteurs IPC
    this.initIPCListeners();
  }

  // Initialiser la fen√™tre de licence
  async showLicenseWindow() {
    // Si une fen√™tre existe d√©j√†, la fermer
    if (this.mainWindow) {
      this.mainWindow.close();
      this.mainWindow = null;
    }

    // Cr√©er la fen√™tre
    this.mainWindow = new BrowserWindow({
      width: 800,
      height: 800,
      show: false, // Ne pas afficher imm√©diatement
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: path.join(__dirname, "licensePreload.js"),
      },
      icon: path.join(__dirname, "../../assets/icon.ico"),
    });

    // Charger le fichier HTML
    await this.mainWindow.loadFile(path.join(__dirname, "licenseView.html"));

    // Afficher la fen√™tre une fois charg√©e
    this.mainWindow.once("ready-to-show", () => {
      this.mainWindow.show();
    });

    // D√©sactiver le menu pour la production
    // this.mainWindow.setMenu(null);

    // Ouvrir DevTools en d√©veloppement
    if (process.env.NODE_ENV === "development") {
      this.mainWindow.webContents.openDevTools();
    }

    return new Promise((resolve) => {
      // √âcouter l'√©v√©nement de licence valid√©e
      ipcMain.once("license-validated", () => {
        console.log("Licence valid√©e, fermeture de la fen√™tre de v√©rification");
        const licenseStatus = this.store.get("licenseStatus");

        if (this.mainWindow) {
          this.mainWindow.close();
          this.mainWindow = null;
        }

        resolve(licenseStatus);
      });

      // S'assurer que la r√©solution est appel√©e m√™me si la fen√™tre est ferm√©e manuellement
      this.mainWindow.on("closed", () => {
        // Nettoyer la r√©f√©rence
        if (this.mainWindow) {
          this.mainWindow = null;
        }

        // Si l'√©v√©nement license-validated n'a pas √©t√© d√©clench√©, on r√©sout quand m√™me
        // Cela permettra √† l'application de continuer m√™me si l'utilisateur ferme la fen√™tre
        const licenseStatus = this.store.get("licenseStatus");
        resolve(licenseStatus);
      });
    });
  }

  // Initialiser les √©couteurs IPC
  initIPCListeners() {
    ipcMain.handle("validate-license", async (event, licenseKey) => {
      const hardwareId =
        this.store.get("hardwareId") || (await this.generateHardwareId());
      this.store.set("licenseKey", licenseKey);

      // V√©rifier si c'est la premi√®re utilisation
      const existingLicenseStatus = this.store.get("licenseStatus");

      if (!existingLicenseStatus || !existingLicenseStatus.valid) {
        // Premi√®re utilisation - activer la licence
        return this.activateLicense(licenseKey, hardwareId);
      } else {
        // Utilisation ult√©rieure - v√©rifier la licence
        return this.validateLicense(licenseKey, hardwareId);
      }
    });

    ipcMain.handle("get-license-status", () => {
      return this.store.get("licenseStatus");
    });

    ipcMain.handle("get-saved-license", () => {
      return this.store.get("licenseKey");
    });

    ipcMain.handle("get-hardware-id", async () => {
      return this.store.get("hardwareId") || (await this.generateHardwareId());
    });

    ipcMain.handle("get-activation-date", () => {
      const licenseStatus = this.store.get("licenseStatus");
      return licenseStatus ? licenseStatus.activationDate : null;
    });

    ipcMain.handle("clear-license", () => {
      // HYDRA BYPASS: No limpiar realmente la licencia, mantener el bypass activo
      console.log("üêâ HYDRA BYPASS CLEAR: Manteniendo licencia Hydra activa");
      
      // Crear una nueva licencia Hydra en lugar de limpiar
      const fakeLicenseStatus = {
        valid: true,
        expiration: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
        clientId: "HYDRA_CLIENT_001",
        clientName: "Usuario Hydra",
        activationDate: new Date().toISOString(),
        timestamp: new Date().toISOString(),
        gameModes: {
          multiplayer: true,
          warzone: true,
          cdl: true
        }
      };
      
      this.store.set("licenseStatus", fakeLicenseStatus);
      this.store.set("licenseKey", "HYDRA_KEY_2024");
      
      return true;
    });
  }

  // G√©n√©rer un ID mat√©riel unique
  async generateHardwareId() {
    try {
      // R√©cup√©rer des informations mat√©rielles
      const [cpu, system, uuid, disk] = await Promise.all([
        si.cpu(),
        si.system(),
        si.uuid(),
        si.diskLayout(),
      ]);

      // Cr√©er une empreinte unique bas√©e sur le mat√©riel
      const hardwareInfo = JSON.stringify({
        cpuId:
          cpu.manufacturer + cpu.brand + cpu.family + cpu.model + cpu.stepping,
        systemId: system.manufacturer + system.model + system.serial,
        diskId: disk.length > 0 ? disk[0].serialNum : "",
        uuid: uuid.os,
      });

      // Cr√©er un hash de ces informations
      const hardwareId = crypto
        .createHash("sha256")
        .update(hardwareInfo)
        .digest("hex");

      // Sauvegarder l'ID mat√©riel
      this.store.set("hardwareId", hardwareId);
      return hardwareId;
    } catch (error) {
      console.error("Erreur lors de la g√©n√©ration de l'ID mat√©riel:", error);
      // En cas d'√©chec, g√©n√©rer un UUID al√©atoire
      const fallbackId = uuidv4();
      this.store.set("hardwareId", fallbackId);
      return fallbackId;
    }
  }

  // Activer la licence (premi√®re utilisation)
  async activateLicense(licenseKey, hardwareId) {
    // HYDRA BYPASS: No hacer llamadas al servidor, retornar √©xito inmediatamente
    console.log("üêâ HYDRA BYPASS ACTIVATION: Activaci√≥n de licencia simulada");
    
    const fakeResult = {
      valid: true,
      expiration: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      clientId: "HYDRA_CLIENT_001",
      clientName: "Usuario Hydra",
      activationDate: new Date().toISOString(),
      gameModes: {
        multiplayer: true,
        warzone: true,
        cdl: true
      }
    };

    // Guardar la licencia Hydra
    this.store.set("licenseStatus", {
      valid: fakeResult.valid,
      expiration: fakeResult.expiration,
      clientId: fakeResult.clientId,
      clientName: fakeResult.clientName,
      activationDate: fakeResult.activationDate,
      timestamp: new Date().toISOString(),
      gameModes: fakeResult.gameModes
    });

    // Enviar resultado Hydra a la interfaz
    if (this.mainWindow) {
      this.mainWindow.webContents.send("license-result", fakeResult);
    }

    return true;
  }

  // Valider la licence avec le serveur
  async validateLicense(licenseKey, hardwareId) {
    // HYDRA BYPASS: No hacer llamadas al servidor, retornar √©xito inmediatamente
    console.log("üêâ HYDRA BYPASS VALIDATION: Validaci√≥n de licencia simulada");
    
    const fakeResult = {
      valid: true,
      expiration: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      clientId: "HYDRA_CLIENT_001",
      clientName: "Usuario Hydra",
      activationDate: new Date().toISOString(),
      gameModes: {
        multiplayer: true,
        warzone: true,
        cdl: true
      }
    };

    // Actualizar la licencia Hydra
    this.store.set("licenseStatus", {
      valid: fakeResult.valid,
      expiration: fakeResult.expiration,
      clientId: fakeResult.clientId,
      clientName: fakeResult.clientName,
      activationDate: fakeResult.activationDate,
      timestamp: new Date().toISOString(),
      gameModes: fakeResult.gameModes
    });

    // Enviar resultado Hydra a la interfaz
    if (this.mainWindow) {
      this.mainWindow.webContents.send("license-result", fakeResult);
    }

    return true;
  }

  // V√©rifier si une licence valide existe
  checkExistingLicense() {
    // HYDRA BYPASS: Siempre retornar una licencia v√°lida
    const fakeLicenseStatus = {
      valid: true,
      expiration: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // 1 a√±o en el futuro
      clientId: "HYDRA_CLIENT_001",
      clientName: "Usuario Hydra",
      activationDate: new Date().toISOString(),
      timestamp: new Date().toISOString(),
      gameModes: {
        multiplayer: true,
        warzone: true,
        cdl: true
      }
    };

    // Guardar la licencia Hydra en el almacenamiento
    this.store.set("licenseStatus", fakeLicenseStatus);
    this.store.set("licenseKey", "HYDRA_KEY_2024");

    console.log("üêâ HYDRA BYPASS ACTIVADO: Licencia v√°lida generada autom√°ticamente");
    return fakeLicenseStatus;
  }
}

module.exports = LicenseManager;
